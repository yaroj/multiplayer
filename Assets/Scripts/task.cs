/*
Чудово! Тестове завдання для Unity розробника: Локальний мультиплеєр.
Орієнтовний час виконання: 2-3 години.
Мета:
Створити невелику ігрову сцену, де вороги з'являються та атакують усіх гравців, присутніх на сцені. Особливість завдання полягає в реалізації локального мультиплеєра: гра повинна підтримувати кількох гравців, кожен з яких запущений в окремому вікні програми на одному комп'ютері.
	Основні вимоги:
1. Мережева взаємодія:
Реалізуйте логіку "Хост-Клієнт" (Host-Client). Один із запущених екземплярів гри виступає як хост(сервер + гравець), решта підключаються до нього як клієнти.
Створіть простий UI для запуску. Достатньо трьох кнопок: "Host", "Client", "Shutdown". Можна використати стандартний NetworkManagerHUD для прискорення розробки.
Система має коректно працювати, коли на одному ПК запускається одна збірка як хост, а одна або декілька інших збірок підключаються до неї як клієнти
2. Гравець (Player):
Створіть префаб гравця (достатньо простої капсули або куба).
Реалізуйте базове переміщення гравця(наприклад, за допомогою WASD).
Камера повинна слідувати за своїм гравцем.
Гравець повинен мати компонент здоров'я (наприклад, int health = 100;).
Префаб гравця має бути мережевим об'єктом (NetworkObject).
3. Вороги (Enemies):
Створіть префаб ворога (також може бути простою геометричною фігурою, наприклад, червоним кубом).
Реалізуйте спавнер, який з'являє ворогів у випадкових точках на сцені з певною періодичністю (наприклад, кожні 5 секунд). Спавн ворогів має відбуватися тільки на хості.
Вороги повинні реагувати на всіх гравців на сцені.
Ворог, що стріляє.
Ворог не рухається (або патрулює невелику територію).
Він знаходить найближчого гравця і повертається в його бік.
З певною періодичністю(наприклад, кожні 2-3 секунди) ворог стріляє в напрямку гравця простими снарядами(кулями).
Снаряди також мають бути мережевими об'єктами, їх створення та рух повинні коректно синхронізуватися між клієнтами. При влучанні в гравця снаряд наносить урон.
Важливо: Вся логіка AI(пошук цілі, рух, атака) повинна виконуватися на хості, а позиції та інші стани ворогів — синхронізуватися з клієнтами.
5. Сцена:
Створіть просту сцену:
Plane в якості землі.
Декілька Cube в якості стін або перешкод, щоб зробити навігацію цікавішою.
Запечіть NavMesh для сцени, якщо обрали варіант ворога, що переслідує.
Що буде оцінюватися?
Якість коду: Чистота, структура, коментарі (де це доречно), дотримання C# та Unity конвенцій.
Розуміння архітектури Netcode for GameObjects: Правильне використання NetworkObject, NetworkBehaviour, NetworkVariable, RPC(Remote Procedure Calls), а також розуміння концепції авторитетності сервера.
Підхід до вирішення задачі: Як кандидат реалізував логіку пошуку найближчого гравця в мережевому середовищі та логіку AI.
Проєкт компілюється та запускається без помилок, функціонал відповідає вимогам.
На що НЕ варто витрачати час:
Складні анімації та моделі. Простих геометричних фігур достатньо.
Пропрацьований UI (крім кнопок для підключення).
Звукові ефекти.
Оптимізація під велику кількість об'єктів.
Як надати результат?
Завантажте весь Unity проєкт на GitHub/GitLab та надішліть посилання на репозиторій. Будь ласка, переконайтеся, що.gitignore налаштований коректно для Unity.
*/

